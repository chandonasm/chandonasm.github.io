<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自增锁 —— 摘自MySQL官方</title>
    <link href="/2022/06/08/MySql/%E8%87%AA%E5%A2%9E%E9%94%81/"/>
    <url>/2022/06/08/MySql/%E8%87%AA%E5%A2%9E%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h1 id="AUTO-INC锁和AUTO-INCREMENT在InnoDB中处理方式"><a href="#AUTO-INC锁和AUTO-INCREMENT在InnoDB中处理方式" class="headerlink" title="AUTO-INC锁和AUTO_INCREMENT在InnoDB中处理方式"></a>AUTO-INC锁和AUTO_INCREMENT在InnoDB中处理方式</h1><h2 id="AUTO-INC-Locks"><a href="#AUTO-INC-Locks" class="headerlink" title="AUTO-INC Locks"></a>AUTO-INC Locks</h2><p>An AUTO-INC lock is a special table-level lock taken by transactions inserting into tables with AUTO_INCREMENT columns. In the simplest case, if one transaction is inserting values into the table, any other transactions must wait to do their own inserts into that table, so that rows inserted by the first transaction receive consecutive primary key values.</p><p>The innodb_autoinc_lock_mode configuration option controls the algorithm used for auto-increment locking. It allows you to choose how to trade off between predictable sequences of auto-increment values and maximum concurrency for insert operations.</p><p>AUTO-INC锁是当向使用含有AUTO_INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁<br>在最简单的情况下，如果一个事务正在向表中插入值，则任何其他事务必须等待对该表执行自己的插入操作，以便第一个事务插入的行的值是连续的。<br>innodb_autoinc_lock_mode配置选项控制用于自动增量锁定的算法。 它允许您选择如何在可预测的自动递增值序列和插入操作的最大并发性之间进行权衡。</p><h2 id="AUTO-INCREMENT-Handling-in-InnoDB"><a href="#AUTO-INCREMENT-Handling-in-InnoDB" class="headerlink" title="AUTO_INCREMENT Handling in InnoDB"></a>AUTO_INCREMENT Handling in InnoDB</h2><p>InnoDB提供了一个可配置的锁定机制，可以显着提高使用AUTO_INCREMENT列向表中添加行的SQL语句的可伸缩性和性能。 要对InnoDB表使用AUTO_INCREMENT机制，必须将AUTO_INCREMENT列定义为索引的一部分，以便可以对表执行相当于索引的SELECT MAX（ai_col）查找以获取最大列值。 通常，这是通过使列成为某些表索引的第一列来实现的。</p><p>本节介绍AUTO_INCREMENT锁定模式的行为，对不同AUTO_INCREMENT锁定模式设置的使用含义，以及InnoDB如何初始化AUTO_INCREMENT计数器。</p><p>InnoDB AUTO_INCREMENT锁定模式</p><p>InnoDB AUTO_INCREMENT锁定模式使用含义</p><p>InnoDB AUTO_INCREMENT计数器初始化</p><h2 id="InnoDB-AUTO-INCREMENT锁定模式"><a href="#InnoDB-AUTO-INCREMENT锁定模式" class="headerlink" title="InnoDB AUTO_INCREMENT锁定模式"></a>InnoDB AUTO_INCREMENT锁定模式</h2><p>本节介绍用于生成自动递增值的AUTO_INCREMENT锁定模式的行为，以及每种锁定模式如何影响复制。 自动递增锁定模式在启动时使用innodb_autoinc_lock_mode配置参数进行配置。</p><p>以下术语用于描述innodb_autoinc_lock_mode设置:</p><ul><li><p>“INSERT-like” statements(类INSERT语句) </p><p>所有可以向表中增加行的语句,包括INSERT, INSERT … SELECT, REPLACE, REPLACE … SELECT, and LOAD DATA.包括“simple-inserts”, “bulk-inserts”, and “mixed-mode” inserts.</p></li><li><p>“Simple inserts” </p><p>可以预先确定要插入的行数（当语句被初始处理时）的语句。 这包括没有嵌套子查询的单行和多行INSERT和REPLACE语句，但不包括INSERT … ON DUPLICATE KEY UPDATE。</p></li><li><p>“Bulk inserts” </p><p>事先不知道要插入的行数（和所需自动递增值的数量）的语句。 这包括INSERT … SELECT，REPLACE … SELECT和LOAD DATA语句，但不包括纯INSERT。 InnoDB在处理每行时一次为AUTO_INCREMENT列分配一个新值。</p></li><li><p>“Mixed-mode inserts” </p><p>这些是“Simple inserts”语句但是指定一些（但不是全部）新行的自动递增值。 示例如下，其中c1是表t1的AUTO_INCREMENT列： </p><p>INSERT INTO t1 (c1,c2) VALUES (1,’a’), (NULL,’b’), (5,’c’), (NULL,’d’);</p></li></ul><p>另一种类型的“Mixed-mode inserts”是INSERT … ON DUPLICATE KEY UPDATE，其在最坏的情况下实际上是INSERT语句随后又跟了一个UPDATE，其中AUTO_INCREMENT列的分配值不一定会在 UPDATE 阶段使用</p><h3 id="innodb-autoinc-lock-mode-x3D-0-“traditional”-lock-mode"><a href="#innodb-autoinc-lock-mode-x3D-0-“traditional”-lock-mode" class="headerlink" title="innodb_autoinc_lock_mode &#x3D; 0 (“traditional” lock mode)"></a>innodb_autoinc_lock_mode &#x3D; 0 (“traditional” lock mode)</h3><p>传统的锁定模式提供了在MySQL 5.1中引入innodb_autoinc_lock_mode配置参数之前存在的相同行为。传统的锁定模式选项用于向后兼容性，性能测试以及解决“Mixed-mode inserts”的问题，因为语义上可能存在差异。<br>在此锁定模式下，所有“INSERT-like”语句获得一个特殊的表级AUTO-INC锁，用于插入具有AUTO_INCREMENT列的表。此锁定通常保持到语句结束（不是事务结束），以确保为给定的INSERT语句序列以可预测和可重复的顺序分配自动递增值，并确保自动递增由任何给定语句分配的值是连续的。</p><p>SESSION_A&gt;DROP TABLE IF EXISTS t;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs sql">Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t (a <span class="hljs-type">bigint</span> unsigned auto_increment <span class="hljs-keyword">primary</span> key) ENGINE<span class="hljs-operator">=</span>InnoDB;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>),(<span class="hljs-number">3</span>),(<span class="hljs-number">4</span>),(<span class="hljs-number">5</span>),(<span class="hljs-number">6</span>),(<span class="hljs-number">7</span>);<br>Query OK, <span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br>Records: <span class="hljs-number">6</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t;<br><span class="hljs-operator">+</span><span class="hljs-comment">---+</span><br><span class="hljs-operator">|</span> a <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">5</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">6</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">7</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@innodb</span>_autoinc_lock_mode;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@innodb</span>_autoinc_lock_mode <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span>                          <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>A B C 三个会话事务隔离级别都是 RR<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@global</span>.tx_isolation,@<span class="hljs-variable">@session</span>.tx_isolation;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------+------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@global</span>.tx_isolation <span class="hljs-operator">|</span> @<span class="hljs-variable">@session</span>.tx_isolation <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------+------------------------+</span><br><span class="hljs-operator">|</span> REPEATABLE<span class="hljs-operator">-</span>READ       <span class="hljs-operator">|</span> REPEATABLE<span class="hljs-operator">-</span>READ        <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------------------+------------------------+</span><br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> a<span class="hljs-operator">&gt;</span><span class="hljs-number">4</span>;<br>Query OK, <span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>B会话被锁,这是由于会话 A 产生的 gap lock<br>SESSION_B<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>SESSION_B<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>); <span class="hljs-comment">--注意这里因为是 null, 锁需要在内存中分配 AUTO-INCREMENT 值</span><br>C 会话被阻塞<br>SESSION_C<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>SESSION_C<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">--这里插入2,没有 gap lock 也被锁了</span><br>(mysql<span class="hljs-variable">@localhost</span>) [fandb]<span class="hljs-operator">&gt;</span> (mysql<span class="hljs-variable">@localhost</span>) [fandb]<span class="hljs-operator">&gt;</span> <br><span class="hljs-keyword">select</span> trx_id,trx_state,trx_requested_lock_id,trx_weight,trx_mysql_thread_id,trx_query, trx_operation_state <span class="hljs-keyword">from</span> information_schema.INNODB_TRX;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------+-----------+-----------------------+------------+---------------------+----------------------------+-----------------------+</span><br><span class="hljs-operator">|</span> trx_id <span class="hljs-operator">|</span> trx_state <span class="hljs-operator">|</span> trx_requested_lock_id <span class="hljs-operator">|</span> trx_weight <span class="hljs-operator">|</span> trx_mysql_thread_id <span class="hljs-operator">|</span> trx_query                  <span class="hljs-operator">|</span> trx_operation_state   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+-----------+-----------------------+------------+---------------------+----------------------------+-----------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">321912</span> <span class="hljs-operator">|</span> LOCK WAIT <span class="hljs-operator">|</span> <span class="hljs-number">321912</span>:<span class="hljs-number">701</span>            <span class="hljs-operator">|</span>          <span class="hljs-number">3</span> <span class="hljs-operator">|</span>                   <span class="hljs-number">7</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>)    <span class="hljs-operator">|</span> setting auto<span class="hljs-operator">-</span>inc lock <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">321911</span> <span class="hljs-operator">|</span> LOCK WAIT <span class="hljs-operator">|</span> <span class="hljs-number">321911</span>:<span class="hljs-number">690</span>:<span class="hljs-number">3</span>:<span class="hljs-number">1</span>        <span class="hljs-operator">|</span>          <span class="hljs-number">3</span> <span class="hljs-operator">|</span>                   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>) <span class="hljs-operator">|</span> inserting             <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">321906</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">RUNNING</span>   <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>                  <span class="hljs-operator">|</span>          <span class="hljs-number">5</span> <span class="hljs-operator">|</span>                   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>                       <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>                  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------+-----------+-----------------------+------------+---------------------+----------------------------+-----------------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>可以看到,SESSION_C是等待自增锁，一直处于setting auto<span class="hljs-operator">-</span>inc lock状态<br>(mysql<span class="hljs-variable">@localhost</span>) [fandb]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> information_schema.INNODB_LOCKS;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------+-------------+-----------+-----------+-------------+------------+------------+-----------+----------+------------------------+</span><br><span class="hljs-operator">|</span> lock_id        <span class="hljs-operator">|</span> lock_trx_id <span class="hljs-operator">|</span> lock_mode <span class="hljs-operator">|</span> lock_type <span class="hljs-operator">|</span> lock_table  <span class="hljs-operator">|</span> lock_index <span class="hljs-operator">|</span> lock_space <span class="hljs-operator">|</span> lock_page <span class="hljs-operator">|</span> lock_rec <span class="hljs-operator">|</span> lock_data              <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------+-------------+-----------+-----------+-------------+------------+------------+-----------+----------+------------------------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">321912</span>:<span class="hljs-number">701</span>     <span class="hljs-operator">|</span> <span class="hljs-number">321912</span>      <span class="hljs-operator">|</span> AUTO_INC  <span class="hljs-operator">|</span> <span class="hljs-keyword">TABLE</span>     <span class="hljs-operator">|</span> `fandb`.`t` <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span>       <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>     <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">321911</span>:<span class="hljs-number">701</span>     <span class="hljs-operator">|</span> <span class="hljs-number">321911</span>      <span class="hljs-operator">|</span> AUTO_INC  <span class="hljs-operator">|</span> <span class="hljs-keyword">TABLE</span>     <span class="hljs-operator">|</span> `fandb`.`t` <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>       <span class="hljs-operator">|</span>       <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>      <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>     <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>                   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">321911</span>:<span class="hljs-number">690</span>:<span class="hljs-number">3</span>:<span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-number">321911</span>      <span class="hljs-operator">|</span> X         <span class="hljs-operator">|</span> RECORD    <span class="hljs-operator">|</span> `fandb`.`t` <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>    <span class="hljs-operator">|</span>        <span class="hljs-number">690</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span> supremum pseudo<span class="hljs-operator">-</span>record <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">321906</span>:<span class="hljs-number">690</span>:<span class="hljs-number">3</span>:<span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-number">321906</span>      <span class="hljs-operator">|</span> X         <span class="hljs-operator">|</span> RECORD    <span class="hljs-operator">|</span> `fandb`.`t` <span class="hljs-operator">|</span> <span class="hljs-keyword">PRIMARY</span>    <span class="hljs-operator">|</span>        <span class="hljs-number">690</span> <span class="hljs-operator">|</span>         <span class="hljs-number">3</span> <span class="hljs-operator">|</span>        <span class="hljs-number">1</span> <span class="hljs-operator">|</span> supremum pseudo<span class="hljs-operator">-</span>record <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------+-------------+-----------+-----------+-------------+------------+------------+-----------+----------+------------------------+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>在statement-based replication的情况下，这意味着当在从服务器上复制SQL语句时，自动增量列使用与主服务器上相同的值。多个INSERT语句的执行结果是确定性的，SLAVE再现与MASTER相同的数据。如果由多个INSERT语句生成的自动递增值交错，则两个并发INSERT语句的结果将是不确定的，并且不能使用基于语句的复制可靠地传播到从属服务器。</p><p>为了解释清楚,查看下面的例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1 (<br>  c1 <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  c2 <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (c1)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB;<br></code></pre></td></tr></table></figure><p>假设有两个事务正在运行，每个事务都将行插入到具有AUTO_INCREMENT列的表中。 一个事务正在使用插入1000行的INSERT … SELECT语句，另一个事务正在使用插入一行的“Simple inserts”语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">Tx1: <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 (c2) <span class="hljs-keyword">SELECT</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">from</span> another <span class="hljs-keyword">table</span> ...<br>Tx2: <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 (c2) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;xxx&#x27;</span>);<br></code></pre></td></tr></table></figure><p>InnoDB不能预先得知有多少行会从TX1的select部分获取到,所以在事务进行过程中,InnoDB一次只会为AUTO_INCREMENT列分配一个值.<br>通过一个表级锁的控制,保证了在同一时刻只有一个引用表t1的INSERT语句可以执行,直到整个INSERT语句结束,并且由不同语句生成自动递增数不会交错<br>由Tx1 INSERT … SELECT语句生成的自动递增值将是连续的，并且Tx2中的INSERT语句使用的（单个）自动递增值将小于或大于用于Tx1的所有那些值，具体取决于 那个语句先执行。</p><p>只要SQL语句在从二进制日志（当使用基于语句的复制或在恢复方案中）重放时以相同的顺序执行，结果将与Tx1和Tx2首次运行时的结果相同。 因此，持续至语句结束的表级锁定( table-level locks)保证了在statement-based replication中对auto-increment列的插入数据的安全性. 但是，当多个事务同时执行insert语句时，这些表级锁定会限制并发性和可伸缩性。</p><p>在前面的示例中，如果没有表级锁，则Tx2中用于INSERT的自动递增列的值取决于语句执行的确切时间。 如果Tx2的INSERT在Tx1的INSERT正在运行时（而不是在它开始之前或完成之后）执行，则由两个INSERT语句分配的特定自动递增值将是不确定的，并且可能每次运行都会得到不同的值</p><p>在连续锁定模式下，InnoDB可以避免为“Simple inserts”语句使用表级AUTO-INC锁，其中行数是预先已知的，并且仍然保留基于语句的复制的确定性执行和安全性。</p><p>如果不使用二进制日志作为恢复或复制的一部分来重放SQL语句，则可以使用interleaved lock模式来消除所有使用表级AUTO-INC锁，以实现更大的并发性和性能,其代价是由于并发的语句交错执行,同一语句生成的AUTO-INCREMENT值可能会产生GAP</p><h3 id="innodb-autoinc-lock-mode-x3D-1-“consecutive”-lock-mode"><a href="#innodb-autoinc-lock-mode-x3D-1-“consecutive”-lock-mode" class="headerlink" title="innodb_autoinc_lock_mode &#x3D; 1 (“consecutive” lock mode)"></a>innodb_autoinc_lock_mode &#x3D; 1 (“consecutive” lock mode)</h3><p>这是默认的锁定模式.在这个模式下,“bulk inserts”仍然使用AUTO-INC表级锁,并保持到语句结束.这适用于所有INSERT … SELECT，REPLACE … SELECT和LOAD DATA语句。同一时刻只有一个语句可以持有AUTO-INC锁.<br>“Simple inserts”（要插入的行数事先已知）通过在mutex（轻量锁）的控制下获得所需数量的自动递增值来避免表级AUTO-INC锁， 它只在分配过程的持续时间内保持，而不是直到语句完成。 不使用表级AUTO-INC锁，除非AUTO-INC锁由另一个事务保持。 如果另一个事务保持AUTO-INC锁，则“简单插入”等待AUTO-INC锁，如同它是一个“批量插入”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs sql">SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> t;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t (a <span class="hljs-type">bigint</span> unsigned auto_increment <span class="hljs-keyword">primary</span> key) ENGINE<span class="hljs-operator">=</span>InnoDB;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>),(<span class="hljs-number">3</span>),(<span class="hljs-number">4</span>),(<span class="hljs-number">5</span>),(<span class="hljs-number">6</span>),(<span class="hljs-number">7</span>);<br>Query OK, <span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.01</span> sec)<br>Records: <span class="hljs-number">6</span>  Duplicates: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">0</span><br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> @<span class="hljs-variable">@innodb</span>_autoinc_lock_mode;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@innodb</span>_autoinc_lock_mode <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span>                          <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t;<br><span class="hljs-operator">+</span><span class="hljs-comment">---+</span><br><span class="hljs-operator">|</span> a <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">5</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">6</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">7</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>SESSION_A<span class="hljs-operator">&gt;</span><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> a<span class="hljs-operator">&gt;</span><span class="hljs-number">4</span>;<br>Query OK, <span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>会话 B, 被 GAP LOCK 阻塞<br>SESSION_B<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>SESSION_B<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-keyword">null</span>); <span class="hljs-comment">--由于是`simple-insert`且`innodb_autoinc_lock_mode=1`,所以并不需要AUTO-INC表级锁</span><br>会话 C 成功插入没有阻塞<br>SESSION_C<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>SESSION_C<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">--由于它也是`simple-insert`且`innodb_autoinc_lock_mode=1`所以不需要获取AUTO-INC表级锁,没有阻塞成功插入</span><br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">0.00</span> sec)<br>C会话<span class="hljs-keyword">rollback</span>,B会话改为使用“Bulk inserts”<br>SESSION_C<span class="hljs-operator">&gt;</span><span class="hljs-keyword">rollback</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>SESSION_B<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> <span class="hljs-keyword">null</span>;<br>此时 C 会话又被阻塞了<br>SESSION_C<span class="hljs-operator">&gt;</span><span class="hljs-keyword">begin</span>;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br>SESSION_C<span class="hljs-operator">&gt;</span><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>); <br><span class="hljs-comment">--这验证了官方文档中的说法`If another transaction holds an AUTO-INC lock, a “simple insert” waits for the AUTO-INC lock, as if it were a “bulk insert”.`</span><br>Query OK, <span class="hljs-number">1</span> <span class="hljs-type">row</span> affected (<span class="hljs-number">41.17</span> sec)<br></code></pre></td></tr></table></figure><p>此锁定模式确保,当行数不预先知道的INSERT存在时(并且自动递增值在语句过程执行中分配)由任何“类INSERT”语句分配的所有自动递增值是连续的，并且对于基于语句的复制(statement-based replication)操作是安全的。</p><p>这种锁定模式显著地提高了可扩展性,并且保证了对于基于语句的复制(statement-based replication)的安全性.此外，与“传统”锁定模式一样，由任何给定语句分配的自动递增数字是连续的。 与使用自动递增的任何语句的“传统”模式相比，语义没有变化.<br>但有一个特例:</p><p>The exception is for “mixed-mode inserts”, where the user provides explicit values for an AUTO_INCREMENT column for some, but not all, rows in a multiple-row “simple insert”. For such inserts, InnoDB allocates more auto-increment values than the number of rows to be inserted. However, all values automatically assigned are consecutively generated (and thus higher than) the auto-increment value generated by the most recently executed previous statement. “Excess” numbers are lost.</p><h3 id="innodb-autoinc-lock-mode-x3D-2-“interleaved”-lock-mode"><a href="#innodb-autoinc-lock-mode-x3D-2-“interleaved”-lock-mode" class="headerlink" title="innodb_autoinc_lock_mode &#x3D; 2 (“interleaved” lock mode)"></a>innodb_autoinc_lock_mode &#x3D; 2 (“interleaved” lock mode)</h3><p>在这种锁定模式下,所有类INSERT(“INSERT-like” )语句都不会使用表级AUTO-INC lock,并且可以同时执行多个语句。这是最快和最可扩展的锁定模式，但是当使用基于语句的复制或恢复方案时，从二进制日志重播SQL语句时，这是不安全的。<br>在此锁定模式下，自动递增值保证在所有并发执行的“类INSERT”语句中是唯一且单调递增的。但是，由于多个语句可以同时生成数字（即，跨语句交叉编号），为任何给定语句插入的行生成的值可能不是连续的。</p><p>如果执行的语句是“simple inserts”，其中要插入的行数已提前知道，则除了“混合模式插入”之外，为单个语句生成的数字不会有间隙。然而，当执行“批量插入”时，在由任何给定语句分配的自动递增值中可能存在间隙。</p><h2 id="InnoDB-AUTO-INCREMENT锁定模式使用含义"><a href="#InnoDB-AUTO-INCREMENT锁定模式使用含义" class="headerlink" title="InnoDB AUTO_INCREMENT锁定模式使用含义"></a>InnoDB AUTO_INCREMENT锁定模式使用含义</h2><h3 id="在复制环节中使用自增列"><a href="#在复制环节中使用自增列" class="headerlink" title="在复制环节中使用自增列"></a>在复制环节中使用自增列</h3><p>如果你在使用基于语句的复制(statement-based replication)请将innodb_autoinc_lock_mode设置为0或1，并在主从上使用相同的值。 如果使用innodb_autoinc_lock_mode &#x3D; 2（“interleaved”）或主从不使用相同的锁定模式的配置，自动递增值不能保证在从机上与主机上相同。<br>如果使用基于行的或混合模式的复制，则所有自动增量锁定模式都是安全的，因为基于行的复制对SQL语句的执行顺序不敏感（混合模式会在遇到不安全的语句是使用基于行的复制模式）。</p><h3 id="“Lost”-auto-increment-values-and-sequence-gaps"><a href="#“Lost”-auto-increment-values-and-sequence-gaps" class="headerlink" title="“Lost” auto-increment values and sequence gaps"></a>“Lost” auto-increment values and sequence gaps</h3><p>在所有锁定模式（0,1和2）中，如果生成自动递增值的事务回滚，那些自动递增值将“丢失”。 一旦为自动增量列生成了值，无论是否完成“类似INSERT”语句以及包含事务是否回滚，都不能回滚。 这种丢失的值不被重用。 因此，存储在表的AUTO_INCREMENT列中的值可能存在间隙。</p><h3 id="Specifying-NULL-or-0-for-the-AUTO-INCREMENT-column"><a href="#Specifying-NULL-or-0-for-the-AUTO-INCREMENT-column" class="headerlink" title="Specifying NULL or 0 for the AUTO_INCREMENT column"></a>Specifying NULL or 0 for the AUTO_INCREMENT column</h3><p>在所有锁定模式（0,1和2）中，如果用户在INSERT中为AUTO_INCREMENT列指定NULL或0，InnoDB会将该行视为未指定值，并为其生成新值。</p><h3 id="为AUTO-INCREMENT列分配一个负值"><a href="#为AUTO-INCREMENT列分配一个负值" class="headerlink" title="为AUTO_INCREMENT列分配一个负值"></a>为AUTO_INCREMENT列分配一个负值</h3><p>在所有锁定模式（0,1和2）中，如果您为AUTO_INCREMENT列分配了一个负值，则不会定义自动增量机制的行为。</p><h3 id="如果AUTO-INCREMENT值大于指定整数类型的最大整数"><a href="#如果AUTO-INCREMENT值大于指定整数类型的最大整数" class="headerlink" title="如果AUTO_INCREMENT值大于指定整数类型的最大整数"></a>如果AUTO_INCREMENT值大于指定整数类型的最大整数</h3><p>在所有锁定模式（0,1和2）中，如果值大于可以存储在指定整数类型中的最大整数，则不定义自动递增机制的行为。</p><h3 id="Gaps-in-auto-increment-values-for-“bulk-inserts”"><a href="#Gaps-in-auto-increment-values-for-“bulk-inserts”" class="headerlink" title="Gaps in auto-increment values for “bulk inserts”"></a>Gaps in auto-increment values for “bulk inserts”</h3><p>当innodb_autoinc_lock_mode设置为0（“traditional”）或1（“consecutive”）时,任何给定语句生成的自动递增值是连续的，没有间隙，因为表级AUTO-INC锁会持续到 语句结束,并且一次只能执行一个这样的语句。</p><p>当innodb_autoinc_lock_mode设置为2（“interleaved”）时，在“bulk inserts”生成的自动递增值中可能存在间隙，但只有在并发执行“INSERT-Like”语句时才会产生这种情况。</p><p>对于锁定模式1或2，在连续语句之间可能出现间隙，因为对于批量插入，每个语句所需的自动递增值的确切数目可能不为人所知，并且可能进行过度估计。</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@innodb</span>_autoinc_lock_mode;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@innodb</span>_autoinc_lock_mode <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span>                          <span class="hljs-number">0</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> t;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t (a <span class="hljs-type">bigint</span> unsigned auto_increment <span class="hljs-keyword">primary</span> key) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">AS</span> a;<br><span class="hljs-comment">/* #1 */</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-comment">/* #2 */</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-comment">/* #3 */</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-comment">/* #4 */</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br><span class="hljs-operator">|</span> a  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">9</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">10</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">11</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">12</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">13</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">14</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">15</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">16</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br>当innodb_autoinc_lock_mode<span class="hljs-operator">=</span><span class="hljs-number">0</span> 类<span class="hljs-keyword">INSERT</span>语句产生的自动递增值都是连续的<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@innodb</span>_autoinc_lock_mode;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span> @<span class="hljs-variable">@innodb</span>_autoinc_lock_mode <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-operator">|</span>                          <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> t;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t (a <span class="hljs-type">bigint</span> unsigned auto_increment <span class="hljs-keyword">primary</span> key) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">AS</span> a;<br><span class="hljs-comment">/* #1 */</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-comment">/* #2 */</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-comment">/* #3 */</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-comment">/* #4 */</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br><span class="hljs-operator">|</span> a  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">9</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">13</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">14</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">15</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">16</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">17</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">18</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">19</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">20</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br>出现了间隙gap, <span class="hljs-number">5</span>和<span class="hljs-number">10</span><span class="hljs-number">-12</span>都没了,下面来解释产生这种情况的原因:<br><span class="hljs-comment">/* #1 */</span> 这是第一次<span class="hljs-keyword">INSERT</span>,此时表中只有一行(创建表时的那一行),但是MySQL不知道有多少行.<br>然后MySQL Grab a chunk <span class="hljs-keyword">of</span> auto_increment <span class="hljs-keyword">values</span> 在chunk中有多少？ 一 只有一个,即<span class="hljs-string">&#x27;2&#x27;</span>,将其插入表中.<br>没有更多的行插入，所以一切完成。<br><span class="hljs-comment">/* #2 */</span> 这是第二次<span class="hljs-keyword">INSERT</span>,此时表中有两行(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),但是MySQL不知道有多少行.<br>MySQL Grab a chunk <span class="hljs-keyword">of</span> auto_increment <span class="hljs-keyword">values</span> 在chunk中有多少？ 一 只有一个,即<span class="hljs-string">&#x27;3&#x27;</span>,将其插入表中.<br>还有需要插入的行,所以Grab another chunk,这次是前一次的两倍大小 在chunk中有多少？ 一 两个,<span class="hljs-string">&#x27;4&#x27;</span>和<span class="hljs-string">&#x27;5&#x27;</span>. 插入<span class="hljs-string">&#x27;4&#x27;</span>.<br>没有更多的行插入，所以一切完成,<span class="hljs-string">&#x27;5&#x27;</span>被舍弃,但是此时 AUTO_INCREMENT的下一个值是<span class="hljs-number">6</span>了<br><span class="hljs-comment">/* #3 */</span>这是第三次<span class="hljs-keyword">INSERT</span>,此时表中有四行(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),但是MySQL不知道有多少行.<br><br><span class="hljs-operator">-</span> Grab a chunk <span class="hljs-keyword">of</span> auto_increment values. How many <span class="hljs-keyword">in</span> the chunk? <span class="hljs-keyword">One</span> <span class="hljs-operator">-</span> the <span class="hljs-keyword">value</span> <span class="hljs-string">&#x27;6&#x27;</span>. <span class="hljs-keyword">Insert</span> it (<span class="hljs-keyword">one</span> <span class="hljs-type">row</span> inserted).<br><span class="hljs-operator">-</span> Still more <span class="hljs-keyword">rows</span> <span class="hljs-keyword">to</span> insert. Grab another chunk, twice <span class="hljs-keyword">as</span> big <span class="hljs-keyword">as</span> before <span class="hljs-operator">-</span> two <span class="hljs-keyword">values</span>, <span class="hljs-string">&#x27;7&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;8&#x27;</span>. <span class="hljs-keyword">Insert</span> them (three <span class="hljs-keyword">rows</span> inserted).<br><span class="hljs-operator">-</span> Still more <span class="hljs-keyword">rows</span> <span class="hljs-keyword">to</span> insert. Grab another chunk, twice <span class="hljs-keyword">as</span> big <span class="hljs-keyword">as</span> before <span class="hljs-operator">-</span> four <span class="hljs-keyword">values</span>, <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-string">&#x27;12&#x27;</span>. <span class="hljs-keyword">Insert</span> the <span class="hljs-string">&#x27;9&#x27;</span> (four <span class="hljs-keyword">rows</span> inserted).<br><span class="hljs-operator">-</span> <span class="hljs-keyword">No</span> more <span class="hljs-keyword">rows</span> <span class="hljs-keyword">to</span> insert. Discard the <span class="hljs-keyword">left</span> <span class="hljs-keyword">over</span> <span class="hljs-string">&#x27;10&#x27;</span>, <span class="hljs-string">&#x27;11&#x27;</span>, <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;12&#x27;</span>.<br>  #<span class="hljs-number">4</span>: <span class="hljs-keyword">Insert</span> <span class="hljs-keyword">as</span> many <span class="hljs-keyword">rows</span> <span class="hljs-keyword">as</span> there <span class="hljs-keyword">are</span> <span class="hljs-keyword">in</span> the <span class="hljs-keyword">table</span> (it<span class="hljs-string">&#x27;s eight rows, but MySQL doesn&#x27;</span>t know that.)<br><span class="hljs-operator">-</span> Grab a chunk <span class="hljs-keyword">of</span> auto_increment values. How many <span class="hljs-keyword">in</span> the chunk? <span class="hljs-keyword">One</span> <span class="hljs-operator">-</span> the <span class="hljs-keyword">value</span> <span class="hljs-string">&#x27;13&#x27;</span>. <span class="hljs-keyword">Insert</span> it (<span class="hljs-keyword">one</span> <span class="hljs-type">row</span> inserted).<br><span class="hljs-operator">-</span> Still more <span class="hljs-keyword">rows</span> <span class="hljs-keyword">to</span> insert. Grab another chunk, twice <span class="hljs-keyword">as</span> big <span class="hljs-keyword">as</span> before <span class="hljs-operator">-</span> two <span class="hljs-keyword">values</span>, <span class="hljs-string">&#x27;14&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;15&#x27;</span>. <span class="hljs-keyword">Insert</span> them (three <span class="hljs-keyword">rows</span> inserted).<br><span class="hljs-operator">-</span> Still more <span class="hljs-keyword">rows</span> <span class="hljs-keyword">to</span> insert. Grab another chunk, twice <span class="hljs-keyword">as</span> big <span class="hljs-keyword">as</span> before <span class="hljs-operator">-</span> four <span class="hljs-keyword">values</span>, <span class="hljs-string">&#x27;16&#x27;</span>, <span class="hljs-string">&#x27;17&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>, <span class="hljs-string">&#x27;19&#x27;</span>. <span class="hljs-keyword">Insert</span> them (seven <span class="hljs-keyword">rows</span> inserted).<br><span class="hljs-operator">-</span> Still more <span class="hljs-keyword">rows</span> <span class="hljs-keyword">to</span> insert. Grab another chunk, twice <span class="hljs-keyword">as</span> big <span class="hljs-keyword">as</span> before <span class="hljs-operator">-</span> eight <span class="hljs-keyword">values</span>, <span class="hljs-string">&#x27;20&#x27;</span>, <span class="hljs-string">&#x27;21&#x27;</span>, <span class="hljs-string">&#x27;22&#x27;</span>, ..., <span class="hljs-string">&#x27;27&#x27;</span>. <span class="hljs-keyword">Insert</span> the <span class="hljs-string">&#x27;20&#x27;</span> (eight <span class="hljs-keyword">rows</span> inserted).<br><span class="hljs-operator">-</span> <span class="hljs-keyword">No</span> more <span class="hljs-keyword">rows</span> <span class="hljs-keyword">to</span> insert. Discard the <span class="hljs-keyword">left</span> <span class="hljs-keyword">over</span> <span class="hljs-string">&#x27;21&#x27;</span>, <span class="hljs-string">&#x27;22&#x27;</span>, etc.<br>  所以这就是 gap 产生的原因<br></code></pre></td></tr></table></figure><p>由“mixed-mode inserts”分配的自动递增值<br>考虑一下场景,在“mixed-mode insert”中,其中一个“simple insert”语句指定了一些（但不是全部）行的AUTO-INCREMENT值。 这样的语句在锁模式0,1和2中表现不同。例如，假设c1是表t1的AUTO_INCREMENT列，并且最近自动生成的序列号是100。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1 (<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> c1 <span class="hljs-type">INT</span> UNSIGNED <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY, <br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> c2 <span class="hljs-type">CHAR</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> ) ENGINE <span class="hljs-operator">=</span> INNODB;<br></code></pre></td></tr></table></figure><p>Now, consider the following “mixed-mode insert” statement:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 (c1,c2) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>), (<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;b&#x27;</span>), (<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;c&#x27;</span>), (<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;d&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>当innodb_autoinc_lock_mode&#x3D;0时:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> c1, c2 <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c2;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+</span><br><span class="hljs-operator">|</span> c1  <span class="hljs-operator">|</span> c2   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> a    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">101</span> <span class="hljs-operator">|</span> b    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> c    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">102</span> <span class="hljs-operator">|</span> d    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+</span><br></code></pre></td></tr></table></figure><p>下一个可用的auto-increment值103.因为innodb_autoinc_lock_mode&#x3D;0时,auto-increment值一次只分配一个,而不是在开始时全部分配.不论是否有并发的其他类INSERT语句同时执行,都会是这样的结果</p><p><strong>当innodb_autoinc_lock_mode&#x3D;1时:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> c1, c2 <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c2;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+</span><br><span class="hljs-operator">|</span> c1  <span class="hljs-operator">|</span> c2   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> a    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">101</span> <span class="hljs-operator">|</span> b    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> c    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-number">102</span> <span class="hljs-operator">|</span> d    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+</span><br></code></pre></td></tr></table></figure><p>不同于innodb_autoinc_lock_mode&#x3D;0时的情况,此时下一个可用的auto-increment值105,因为auto-increment值在语句一开始就分配了,分配了四个,但是只用了俩.不论是否有并发的其他类INSERT语句同时执行,都会是这样的结果</p><p><strong>当innodb_autoinc_lock_mode&#x3D;2时:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> c1, c2 <span class="hljs-keyword">FROM</span> t1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> c2;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+</span><br><span class="hljs-operator">|</span> c1  <span class="hljs-operator">|</span> c2   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> a    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   x <span class="hljs-operator">|</span> b    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   <span class="hljs-number">5</span> <span class="hljs-operator">|</span> c    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>   y <span class="hljs-operator">|</span> d    <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----+------+</span><br></code></pre></td></tr></table></figure><p>x和y的值是唯一的，并大于任何先前生成的行。 然而，x和y的具体值取决于通过并发执行语句生成的自动增量值的数量。</p><p>最后考虑下面的情况,当最近的 AUTO-INCREMENT 值为4时,执行下面的语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 (c1,c2) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;a&#x27;</span>), (<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;b&#x27;</span>), (<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;c&#x27;</span>), (<span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;d&#x27;</span>);<br></code></pre></td></tr></table></figure><p>无论innodb_autoinc_lock_mode如何设置,都会报错duplicate-key error 23000 (Can’t write; duplicate key in table)<br>因为5已经分配给了(NULL, ‘b’),所以导致插入(5, ‘C’)时报错</p><p>在INSERT语句序列的中间修改AUTO_INCREMENT列值<br>在所有锁定模式（0,1和2）中，在INSERT语句序列中间修改AUTO_INCREMENT列值可能会导致duplicate key错误。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t1 (<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> c1 <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">PRIMARY</span> KEY (c1)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span>  ) ENGINE <span class="hljs-operator">=</span> InnoDB;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">0</span>), (<span class="hljs-number">0</span>), (<span class="hljs-number">3</span>); <span class="hljs-comment">-- 0 0分配两个值1,2. 手动指定3,则此时AUTO_INCREMENT为3,下一个值为4</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> c1 <span class="hljs-keyword">FROM</span> t1;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br><span class="hljs-operator">|</span> c1 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">UPDATE</span> t1 <span class="hljs-keyword">SET</span> c1 <span class="hljs-operator">=</span> <span class="hljs-number">4</span> <span class="hljs-keyword">WHERE</span> c1 <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> c1 <span class="hljs-keyword">FROM</span> t1;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br><span class="hljs-operator">|</span> c1 <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t1 <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">--由于分配值为4,所以报错duplicate key</span><br>ERROR <span class="hljs-number">1062</span> (<span class="hljs-number">23000</span>): Duplicate entry <span class="hljs-string">&#x27;4&#x27;</span> <span class="hljs-keyword">for</span> key <span class="hljs-string">&#x27;PRIMARY&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="InnoDB-AUTO-INCREMENT计数器初始化"><a href="#InnoDB-AUTO-INCREMENT计数器初始化" class="headerlink" title="InnoDB AUTO_INCREMENT计数器初始化"></a>InnoDB AUTO_INCREMENT计数器初始化</h2><p>本章节讨论 InnoDB如何初始化AUTO_INCREMENT计数器<br>如果你为一个Innodb表创建了一个AUTO_INCREMENT列,则InnoDB数据字典中的表句柄包含一个称为自动递增计数器的特殊计数器，用于为列分配新值。 此计数器仅存在于内存中，而不存储在磁盘上。</p><p>要在服务器重新启动后初始化自动递增计数器，InnoDB将在首次插入行到包含AUTO_INCREMENT列的表时执行以下语句的等效语句。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> MAX(ai_col) <span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>;<br></code></pre></td></tr></table></figure><p>InnoDB增加语句检索的值，并将其分配给表和表的自动递增计数器。 默认情况下，值增加1.此默认值可以由auto_increment_increment配置设置覆盖。</p><p>如果表为空，InnoDB使用值1.此默认值可以由auto_increment_offset配置设置覆盖。</p><p>如果在自动递增计数器初始化前使用SHOW TABLE STATUS语句查看表, InnoDB将初始化计数器值,但不会递增该值.这个值会储存起来以备之后的插入语句使用.这个初始化过程使用了一个普通的排它锁来读取表中自增列的最大值. InnoDB遵循相同的过程来初始化新创建的表的自动递增计数器。</p><p>在自动递增计数器初始化之后，如果您未明确指定AUTO_INCREMENT列的值，InnoDB会递增计数器并将新值分配给该列。如果插入显式指定列值的行，并且该值大于当前计数器值，则将计数器设置为指定的列值。</p><p>只要服务器运行，InnoDB就使用内存中自动递增计数器。当服务器停止并重新启动时，InnoDB会重新初始化每个表的计数器，以便对表进行第一次INSERT，如前所述。</p><p>服务器重新启动还会取消CREATE TABLE和ALTER TABLE语句中的AUTO_INCREMENT &#x3D; N表选项的效果</p><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html#innodb-auto-increment-initialization">https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html#innodb-auto-increment-initialization</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快照读与MVCC</title>
    <link href="/2022/06/08/MySql/%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8EMVCC/"/>
    <url>/2022/06/08/MySql/%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8EMVCC/</url>
    
    <content type="html"><![CDATA[<h1 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h1><p>全称Multi-Version Concurrency Control，多版本并发控制。<br>核心思想：维持一个数据的多个版本，更好的处理读写冲突，做到即使读写有冲突也能做到不加锁，非阻塞，并发读。<br>依赖于记录中的三个隐藏字段与undo log 与read view实现。</p><p>隐藏字段：<br>DB_TRX_ID，记录最后一次修改该记录的事务ID。占用6字节<br>DB_ROLL_PTR，回滚指针，指向这条记录的上一个版本，配合undolog。占用6字节<br>DB_ROW_ID，如果数据表没有主键，InnoDB引擎自动生成的隐式主键。占用6字节</p><p>某事务对记录进行修改，数据库回对此记录加排他锁，并将此记录拷贝到undo log中，拷贝后，修改原记录数据，修改DB_TRX_ID，修改DB_ROLL_PTR指向到拷贝到undo log中的副本，事务提交后，释放锁。<br>所以undo log会形成一条线性的版本记录链表，链首为最近的一次记录，链尾是最早的一次记录。</p><h2 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h2><p>MySQL InnoDB中对MVCC的实现。<br>隔离级别 Repeatable Read 解决幻读的原理。<br>普通的select查询操作使用的便是快照读。<br>快照读的实现：基于MVCC思想，主要通过undo log、Read View与行记录的3个隐藏字段实现。</p><h2 id="READ-VIEW"><a href="#READ-VIEW" class="headerlink" title="READ  VIEW"></a>READ  VIEW</h2><p>只读视图<br>事务进行快照读时产生的视图，快照读会生成一个当前时刻的系统数据快照，记录维护当前活跃事务的id。事务的id时递增的。<br>其作用是判断事务能看到数据的哪个版本，有可能读到的是最新数据，也有可能是读到undo log中某个版本的数据。<br>read view的三个全局：<br>trx_list：列表，维护read view生成时刻系统中正活跃的事务ID<br>up_limit_id：记录trx_list中最小的事务ID<br>low_limite_id：read view生成时系统还未分配id下一个事务ID</p><h2 id="比较规则"><a href="#比较规则" class="headerlink" title="比较规则"></a><strong>比较规则</strong></h2><p>Read View主要是将要修改的数据的最新记录的DB_TRX_ID与当前系统中的其他活跃事务的ID对比，</p><ol><li><p>DB_TRX_ID&lt;up_limit_id，则当前事务能看到DB_TRX_ID版本的数据记录。</p><p>由于事务id是递增，id越小时间越早，最后一次修改此记录的事务id&lt;当前系统中活跃的最小事务id，说明此记录最后一次事务的时间早于当前时间系统中所有的事务，所以当前事务能看到当前DB_TRX_ID版本的数据记录。</p></li><li><p>如果DB_TRX_ID&gt;up_limit_id，且DB_TRX_ID&gt;&#x3D;low_limit_id则说明DB_TRX_ID所在的记录在read view生成后出现，对当前事务不可见。</p><p>最后一次修改此纪录的事务时间晚于当前系统中活跃事务的事务，且早于read view生成，那肯定看不见数据。</p></li><li><p>DB_TRX_ID如果在活跃事务中，说明read view生成时，DB_TRX_ID的事务还未提交，所以当前事务看不到此版本记录。<br>如果DB_TRX_ID的事务不在活跃事务中，说明read view在生成前就开始提交了，修改结果当前事务可见。</p></li></ol><p>直到找到满足条件的DB_TRX_ID，所在版本旧纪录就是当前事务能看到版本中的最新版本。</p><h2 id="生成时机"><a href="#生成时机" class="headerlink" title="生成时机"></a><strong>生成时机</strong></h2><p><strong>Repeatable Read级别</strong><br>对某条记录的第一次快照创建一个Read View，会记录此时系统活跃的其他事务快照，其他事务的修改对此快照都不可见，且此后再次快照读使用的仍是这个Read View。而早于Read View的事务的修改，因为都已经提交所以对此快照都可见。</p><p><strong>Read commited级别</strong><br>每次快照都会生成一个Read View，也是在此级别下某个事务可看到别的事务提交的更新的原因。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>MVCC</tag>
      
      <tag>快照读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>当前读与LBCC</title>
    <link href="/2022/06/08/MySql/%E5%BD%93%E5%89%8D%E8%AF%BB%E4%B8%8ELBCC/"/>
    <url>/2022/06/08/MySql/%E5%BD%93%E5%89%8D%E8%AF%BB%E4%B8%8ELBCC/</url>
    
    <content type="html"><![CDATA[<h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><p><strong>按模式分类</strong><br>    共享锁 Shared Locks<br>    排他锁 Exclusive Locks<br>    意向锁 Intention Locks<br>        意向共享锁 Intention Shared Locks<br>        意向排他锁 Intention Exclusive Locks</p><p><strong>按算法分类</strong><br>    记录锁 Record Locks<br>    间隙锁 Grap Locks<br>    临键锁 Next-Key Locks</p><h2 id="锁的比较与粒度"><a href="#锁的比较与粒度" class="headerlink" title="锁的比较与粒度"></a>锁的比较与粒度</h2><p>行级锁：针对一条记录加锁，粒度细。如记录锁，也称为行锁。<br>表级锁：针对整个表中的记录枷锁，粒度粗。分为：共享锁（S锁），独占锁（X锁）。<br>    意向锁：<br>        意向共享锁：简称IS锁，当事务准备在某条记录上加S锁时，需要先在表上加IS锁。<br>        意向排他锁：简称IX锁，当事务准备在某条记录上加X锁时，需要先在表上加IX锁。</p><h2 id="锁的用途"><a href="#锁的用途" class="headerlink" title="锁的用途"></a>锁的用途</h2><p>解决并发事务问题。<br>并发事务最大的难点：</p><ol><li>最大程度的利用数据库并发</li><li>确保每个用户以一致的方式读写数据，特别在一个事务读的同时另外一个事务在写。</li></ol><p><strong>方案一MVCC</strong><br>    MVCC思想的实现：快照读<br>    快照读不会对任何记录加锁，读写不冲突，性能高。<br>    缺点：读取到的数据往往是历史版本数据。</p><p><strong>方案二读写加锁</strong></p><p>​不会出现读取到历史版本数据的问题。<br>​数据库的隔离级别使用的就是锁。</p><p>​<strong>脏读：</strong>一个事务读到了某个事务未提交事务中的数据。<br>​解决：写数据时，对所操作的记录加锁使其他事务无法读取该记录。<br>​<strong>不可重复读：</strong>因其他事务对一条记录的修改，使另外的事务在事务范围内的多次读取此条记录数据不一致。<br>​解决：读取该记录时加锁，使其他事务无法操作此记录。<br>​<strong>幻读：</strong>当某个事务读取某个范围内的记录时，另外的事务又在该范围内插入了新记录，导致此次读取操作不能支撑后续业务的执行。<br>​如：一个事物内新增记录，其主键为Id，新增前没有此Id记录但插入时却出现主键冲突，原因是当前事务看不到其他事务的操作。<br>​解决：使用加锁的方式解决幻读不太容易，第一次读数据的时候，读取在前，其他事务插入在后，读取的时候加锁不知道给谁加。<br>​ 在MySQL中的 InnoDB引擎中，使用了间隙锁的方式解决。</p><h2 id="锁的兼容"><a href="#锁的兼容" class="headerlink" title="锁的兼容"></a>锁的兼容</h2><p>共享锁：简称S锁，</p><h2 id="INNODB引擎中的锁"><a href="#INNODB引擎中的锁" class="headerlink" title="INNODB引擎中的锁"></a>INNODB引擎中的锁</h2><p>InnoDB存储引擎支持表锁，行锁。</p><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><h4 id="S锁与X锁"><a href="#S锁与X锁" class="headerlink" title="S锁与X锁"></a>S锁与X锁</h4><p>Innodb中的表锁很鸡肋，只在一些特殊情况下才会用到如崩溃恢复，全局变量：<br>autocommit&#x3D;0;<br>innodb_table_locks&#x3D;1;<br>获取表锁语句:<br>LOCK TABLES mytable [READ&#x2F;WRITE];<br>READ:InnoDB存储引擎对表mytable加表级S锁。<br>WRITE:InnoDB存储引擎对表mytable加表级X锁。<br><strong>不要使用LOCK TABLES手动锁表的语句，没用且降低并发。</strong></p><p>对某个表执行DDL语句如alter table ，drop table 时，会阻塞其他事务如select insert delete update。<br>反过来，执行select等事务时，对表进行DDL操作也会被阻塞。<br>此阻塞过程由server层的一种叫 元数据锁  来实现</p><h4 id="IS-IX意向锁"><a href="#IS-IX意向锁" class="headerlink" title="IS-IX意向锁"></a>IS-IX意向锁</h4><p>意向锁都是表级锁。<br>意向锁用于加表级别的S锁或X锁时，快速判断表中的记录是否被上锁，避免用遍历的方式查看行锁记录。<br>意向锁不能手动添加，只能由InnoDB引擎自行添加。</p><h2 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h2><p>当前读的思想基于LBCC，全称Lock-Based Concurrency Control ，基于锁的并发控制。</p><p>不同于MVCC思想的快照读，当前读读取的是最新版本，并对读取的记录加锁，阻止其他事务的改动避免出现安全问题。</p><h3 id="当前读的语句"><a href="#当前读的语句" class="headerlink" title="当前读的语句"></a>当前读的语句</h3><h4 id="select"><a href="#select" class="headerlink" title="select"></a><strong>select</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> LOCK <span class="hljs-keyword">IN</span> SHARE MODE;<br></code></pre></td></tr></table></figure><p>select语句中如果语句后有LOCK IN SHARE MODE，则会对读取到的记录加S锁，允许其他事务来获取S锁，但是不能获取X锁。如果想要获取S锁，则阻塞至当前事务提交，S锁释放。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>;<br></code></pre></td></tr></table></figure><p>select语句中如果巨厚有for UPDATE，则会对读取到的记录加X锁，不允许其他事务获取任何锁。如果想要获取X锁，则阻塞到当前事务提交，X锁释放。</p><h3 id="写模式下的读锁"><a href="#写模式下的读锁" class="headerlink" title="写模式下的读锁"></a>写模式下的读锁</h3><p><strong>INSERT</strong><br>新插入一条记录的操作一般不 加锁，MySQL InnoDB通过一种 <strong>隐式锁</strong>使此条记录在事务提交前不被别的事务访问。<br>会获取锁的情况：<br><strong>DELETE</strong><br>定位此记录的位置时，获取此记录的X锁，锁定读，再执行delete mark操作。</p><p><strong>UPDAET</strong></p><ol><li><p>条件：未修改记录的键值，且，更新前后的列占用的存储地址不变。<br>定位此记录的位置需获取X锁锁定读。</p></li><li><p>条件：未修改记录的的键值，更新后的存储地址改变了。</p><p>定位此记录时获取此记录X锁，锁定读，并删除（移入垃圾链表），再插入新记录，插入式也要获取X锁。</p></li><li><p>修改此记录的键值，则相当于在原记录上做Delete操作后再Insert操作，加锁按照Delete与Insert规则。</p></li></ol><h3 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h3><h4 id="记录锁-Record-Locks"><a href="#记录锁-Record-Locks" class="headerlink" title="记录锁(Record Locks)"></a>记录锁(Record Locks)</h4><p>官方名称为 LOCK_REC_NOT_GAP</p><p>对单条记录加锁，记录是指通过给索引上的索引项加锁。<br>也就意味着，只有通过索引条件检索的数据，InnoDB引擎才使用行级锁，否则使用表级锁。<br>使用主键索引、唯一索引、普通索引都会使用行锁对数据加锁。<br>注：<br>只有执行计划真正使用到了索引才能使用行锁。<br>是否使用送印检索数据由MySQL决定<br>如果MySQL认为全表扫描效率更高，就不会使用索引，不使用行锁。</p><h4 id="间隙锁-Gap-Locks-与幻读"><a href="#间隙锁-Gap-Locks-与幻读" class="headerlink" title="间隙锁 (Gap Locks)与幻读"></a>间隙锁 (Gap Locks)与幻读</h4><p>间隙锁是对索引前后的间隙加锁，对索引本身不上锁。</p><p>MVCC可解决快照读的幻读问题，LBCC解决当前读的幻读问题，但是在在事务开始第一次读取数据时，那些幻读的数据还不存在，所以无法给那些记录加锁。<br>MySQL在Reapeaable Read隔离级别下可解决幻读，就是通过间隙锁完成。</p><p><img src="/2022/06/08/MySql/%E5%BD%93%E5%89%8D%E8%AF%BB%E4%B8%8ELBCC/image-20220607134624333.png"></p><p>上图中间隙锁锁定了 (2,5] 与[6,10)，所以在词条记录的前后间隙无法插入新记录。<br>间隙锁只在Repeatable Read基本下。</p><h3 id="AUTO-INC锁"><a href="#AUTO-INC锁" class="headerlink" title="AUTO-INC锁"></a><strong>AUTO-INC锁</strong></h3><h4 id="Mysql的插入方式语句"><a href="#Mysql的插入方式语句" class="headerlink" title="Mysql的插入方式语句"></a>Mysql的插入方式语句</h4><p><strong>类INSERT语句（INSERT-LIKE）</strong><br>所有可以向表中增加行的语句，包括：INSERT、INSERT…SELECT、REPLAC、REPLACE…SELECT  和LOAD DATA，包括一下simple inserts ，bullk-inserts，mixed-inserts。<br>**simple inserts **<br>可预先确定要插入行数的语句，指单行或多行的insert语句，但没有嵌套子查询。不包括insert ….on duplicate key update</p><p><strong>bullk-inserts</strong><br>事先不知道要插入行数的语句，如insert…select replace…select load…data，不包括纯insert语。innnodb在处理每一行时给自增字段分配新值</p><p><strong>mixed-inserts</strong><br>simple inserts中，有指定新增行数的语句。如 insert into table1 (colum1 colum2) values( … ) </p><p>执行Insert语句时，若不能确定插入记录数量，则加表锁，然后为自增字段列分配递增值，结束后释放。期间其他事务的插入语句都被阻塞，以保证分配的递增值连续。</p><p>若可以确定插入的数量，加轻量级锁，如一次确定插入了10条记录，那么只锁这10条记录，避免锁表。<br>参数控制：s</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;innodb_autoinc_lock_mode&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>0：traditional级别。一律采用表锁，必须等待当前SQL执行完成后（不是事务完成）才释放锁，性能低。<br>1：consecutive级别。Mysql默认。如果是可确定新增行数的语句，可立刻获得锁并在分配自增值完成后释放锁，不必等待SQL执行完成。<br>                                        无法预先确定插入行数的语句依然会使用表锁。</p><p>2：interleaved 级别。都不会采用表级锁，效率最高。但在并发执行不预先确定行数的批量插入，可能会出现间隙。因为每个语句的自动递增确切数可能进行过度预估。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>当前读</tag>
      
      <tag>锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/08/hello-world/"/>
    <url>/2022/06/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
